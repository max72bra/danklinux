// Code generated by mockery v2.53.5. DO NOT EDIT.

package plugins

import mock "github.com/stretchr/testify/mock"

// MockGitClient is an autogenerated mock type for the GitClient type
type MockGitClient struct {
	mock.Mock
}

type MockGitClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGitClient) EXPECT() *MockGitClient_Expecter {
	return &MockGitClient_Expecter{mock: &_m.Mock}
}

// HasUpdates provides a mock function with given fields: path
func (_m *MockGitClient) HasUpdates(path string) (bool, error) {
	ret := _m.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for HasUpdates")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(path)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGitClient_HasUpdates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasUpdates'
type MockGitClient_HasUpdates_Call struct {
	*mock.Call
}

// HasUpdates is a helper method to define mock.On call
//   - path string
func (_e *MockGitClient_Expecter) HasUpdates(path interface{}) *MockGitClient_HasUpdates_Call {
	return &MockGitClient_HasUpdates_Call{Call: _e.mock.On("HasUpdates", path)}
}

func (_c *MockGitClient_HasUpdates_Call) Run(run func(path string)) *MockGitClient_HasUpdates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockGitClient_HasUpdates_Call) Return(_a0 bool, _a1 error) *MockGitClient_HasUpdates_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGitClient_HasUpdates_Call) RunAndReturn(run func(string) (bool, error)) *MockGitClient_HasUpdates_Call {
	_c.Call.Return(run)
	return _c
}

// PlainClone provides a mock function with given fields: path, url
func (_m *MockGitClient) PlainClone(path string, url string) error {
	ret := _m.Called(path, url)

	if len(ret) == 0 {
		panic("no return value specified for PlainClone")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(path, url)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGitClient_PlainClone_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PlainClone'
type MockGitClient_PlainClone_Call struct {
	*mock.Call
}

// PlainClone is a helper method to define mock.On call
//   - path string
//   - url string
func (_e *MockGitClient_Expecter) PlainClone(path interface{}, url interface{}) *MockGitClient_PlainClone_Call {
	return &MockGitClient_PlainClone_Call{Call: _e.mock.On("PlainClone", path, url)}
}

func (_c *MockGitClient_PlainClone_Call) Run(run func(path string, url string)) *MockGitClient_PlainClone_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockGitClient_PlainClone_Call) Return(_a0 error) *MockGitClient_PlainClone_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGitClient_PlainClone_Call) RunAndReturn(run func(string, string) error) *MockGitClient_PlainClone_Call {
	_c.Call.Return(run)
	return _c
}

// Pull provides a mock function with given fields: path
func (_m *MockGitClient) Pull(path string) error {
	ret := _m.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for Pull")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGitClient_Pull_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Pull'
type MockGitClient_Pull_Call struct {
	*mock.Call
}

// Pull is a helper method to define mock.On call
//   - path string
func (_e *MockGitClient_Expecter) Pull(path interface{}) *MockGitClient_Pull_Call {
	return &MockGitClient_Pull_Call{Call: _e.mock.On("Pull", path)}
}

func (_c *MockGitClient_Pull_Call) Run(run func(path string)) *MockGitClient_Pull_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockGitClient_Pull_Call) Return(_a0 error) *MockGitClient_Pull_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGitClient_Pull_Call) RunAndReturn(run func(string) error) *MockGitClient_Pull_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGitClient creates a new instance of MockGitClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGitClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGitClient {
	mock := &MockGitClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
